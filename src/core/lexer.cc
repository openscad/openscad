#line 1 "/home/gsohler/git/pythonscad/build/objects/lexer.cxx"

#line 3 "/home/gsohler/git/pythonscad/build/objects/lexer.cxx"

#define YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer lexer_create_buffer
#define yy_delete_buffer lexer_delete_buffer
#define yy_scan_buffer lexer_scan_buffer
#define yy_scan_string lexer_scan_string
#define yy_scan_bytes lexer_scan_bytes
#define yy_init_buffer lexer_init_buffer
#define yy_flush_buffer lexer_flush_buffer
#define yy_load_buffer_state lexer_load_buffer_state
#define yy_switch_to_buffer lexer_switch_to_buffer
#define yypush_buffer_state lexerpush_buffer_state
#define yypop_buffer_state lexerpop_buffer_state
#define yyensure_buffer_stack lexerensure_buffer_stack
#define yy_flex_debug lexer_flex_debug
#define yyin lexerin
#define yyleng lexerleng
#define yylex lexerlex
#define yylineno lexerlineno
#define yyout lexerout
#define yyrestart lexerrestart
#define yytext lexertext
#define yywrap lexerwrap
#define yyalloc lexeralloc
#define yyrealloc lexerrealloc
#define yyfree lexerfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define lexer_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer lexer_create_buffer
#endif

#ifdef yy_delete_buffer
#define lexer_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer lexer_delete_buffer
#endif

#ifdef yy_scan_buffer
#define lexer_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer lexer_scan_buffer
#endif

#ifdef yy_scan_string
#define lexer_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string lexer_scan_string
#endif

#ifdef yy_scan_bytes
#define lexer_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes lexer_scan_bytes
#endif

#ifdef yy_init_buffer
#define lexer_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer lexer_init_buffer
#endif

#ifdef yy_flush_buffer
#define lexer_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer lexer_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define lexer_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state lexer_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define lexer_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer lexer_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define lexerpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state lexerpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define lexerpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state lexerpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define lexerensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack lexerensure_buffer_stack
#endif

#ifdef yylex
#define lexerlex_ALREADY_DEFINED
#else
#define yylex lexerlex
#endif

#ifdef yyrestart
#define lexerrestart_ALREADY_DEFINED
#else
#define yyrestart lexerrestart
#endif

#ifdef yylex_init
#define lexerlex_init_ALREADY_DEFINED
#else
#define yylex_init lexerlex_init
#endif

#ifdef yylex_init_extra
#define lexerlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra lexerlex_init_extra
#endif

#ifdef yylex_destroy
#define lexerlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy lexerlex_destroy
#endif

#ifdef yyget_debug
#define lexerget_debug_ALREADY_DEFINED
#else
#define yyget_debug lexerget_debug
#endif

#ifdef yyset_debug
#define lexerset_debug_ALREADY_DEFINED
#else
#define yyset_debug lexerset_debug
#endif

#ifdef yyget_extra
#define lexerget_extra_ALREADY_DEFINED
#else
#define yyget_extra lexerget_extra
#endif

#ifdef yyset_extra
#define lexerset_extra_ALREADY_DEFINED
#else
#define yyset_extra lexerset_extra
#endif

#ifdef yyget_in
#define lexerget_in_ALREADY_DEFINED
#else
#define yyget_in lexerget_in
#endif

#ifdef yyset_in
#define lexerset_in_ALREADY_DEFINED
#else
#define yyset_in lexerset_in
#endif

#ifdef yyget_out
#define lexerget_out_ALREADY_DEFINED
#else
#define yyget_out lexerget_out
#endif

#ifdef yyset_out
#define lexerset_out_ALREADY_DEFINED
#else
#define yyset_out lexerset_out
#endif

#ifdef yyget_leng
#define lexerget_leng_ALREADY_DEFINED
#else
#define yyget_leng lexerget_leng
#endif

#ifdef yyget_text
#define lexerget_text_ALREADY_DEFINED
#else
#define yyget_text lexerget_text
#endif

#ifdef yyget_lineno
#define lexerget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno lexerget_lineno
#endif

#ifdef yyset_lineno
#define lexerset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno lexerset_lineno
#endif

#ifdef yywrap
#define lexerwrap_ALREADY_DEFINED
#else
#define yywrap lexerwrap
#endif

#ifdef yyalloc
#define lexeralloc_ALREADY_DEFINED
#else
#define yyalloc lexeralloc
#endif

#ifdef yyrealloc
#define lexerrealloc_ALREADY_DEFINED
#else
#define yyrealloc lexerrealloc
#endif

#ifdef yyfree
#define lexerfree_ALREADY_DEFINED
#else
#define yyfree lexerfree
#endif

#ifdef yytext
#define lexertext_ALREADY_DEFINED
#else
#define yytext lexertext
#endif

#ifdef yyleng
#define lexerleng_ALREADY_DEFINED
#else
#define yyleng lexerleng
#endif

#ifdef yyin
#define lexerin_ALREADY_DEFINED
#else
#define yyin lexerin
#endif

#ifdef yyout
#define lexerout_ALREADY_DEFINED
#else
#define yyout lexerout
#endif

#ifdef yy_flex_debug
#define lexer_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug lexer_flex_debug
#endif

#ifdef yylineno
#define lexerlineno_ALREADY_DEFINED
#else
#define yylineno lexerlineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN (-32767 - 1)
#endif
#ifndef INT32_MIN
#define INT32_MIN (-2147483647 - 1)
#endif
#ifndef INT8_MAX
#define INT8_MAX (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR)(c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin)
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
 *       access to the local variable yy_act. Since yyless() is a macro, it would break
 *       existing scanners that call yyless() from OUTSIDE yylex.
 *       One obvious solution it to make yy_act a global. I tried that, and saw
 *       a 5% performance hit in a non-yylineno scanner, because yy_act is
 *       normally declared as a register variable-- so it is not worth it.
 */
#define YY_LESS_LINENO(n)                  \
  do {                                     \
    int yyl;                               \
    for (yyl = n; yyl < yyleng; ++yyl)     \
      if (yytext[yyl] == '\n') --yylineno; \
  } while (0)
#define YY_LINENO_REWIND_TO(dst)         \
  do {                                   \
    const char *p;                       \
    for (p = yy_cp - 1; p >= (dst); --p) \
      if (*p == '\n') --yylineno;        \
  } while (0)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n)                                                                           \
  do {                                                                                      \
    /* Undo effects of setting up yytext. */                                                \
    int yyless_macro_arg = (n);                                                             \
    YY_LESS_LINENO(yyless_macro_arg);                                                       \
    *yy_cp = (yy_hold_char);                                                                \
    YY_RESTORE_YY_MORE_OFFSET(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
    YY_DO_BEFORE_ACTION; /* set up yytext again */                                          \
  } while (0)
#define unput(c) yyunput(c, (yytext_ptr))

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state {
  FILE *yy_input_file;

  char *yy_ch_buf;  /* input buffer */
  char *yy_buf_pos; /* current position in input buffer */

  /* Size of input buffer in bytes, not including room for EOB
   * characters.
   */
  int yy_buf_size;

  /* Number of characters read into yy_ch_buf, not including EOB
   * characters.
   */
  int yy_n_chars;

  /* Whether we "own" the buffer - i.e., we know we created it,
   * and can realloc() it to grow it, and should free() it to
   * delete it.
   */
  int yy_is_our_buffer;

  /* Whether this is an "interactive" input source; if so, and
   * if we're using stdio for input, then we want to use getc()
   * instead of fread(), to make sure we stop fetching input after
   * each newline.
   */
  int yy_is_interactive;

  /* Whether we're considered to be at the beginning of a line.
   * If so, '^' rules will be active on the next match, otherwise
   * not.
   */
  int yy_at_bol;

  int yy_bs_lineno; /**< The line count. */
  int yy_bs_column; /**< The column count. */

  /* Whether to try to fill the input buffer when we reach the
   * end of it.
   */
  int yy_fill_buffer;

  int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
  /* When an EOF's been seen but there's still some text to process
   * then we mark the buffer as YY_EOF_PENDING, to indicate that we
   * shouldn't try reading from the input source any more.  We might
   * still have a bunch of tokens to match, though, because of
   * possible backing-up.
   *
   * When we actually see the EOF, we change the status to "new"
   * (via yyrestart()), so that the user can continue scanning by
   * just pointing yyin at a new input file.
   */
#define YY_BUFFER_EOF_PENDING 2
};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0;          /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0;          /**< capacity of stack. */
static YY_BUFFER_STATE *yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ((yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars; /* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;  /* whether we need to initialize */
static int yy_start = 0; /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart(FILE *input_file);
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer);
YY_BUFFER_STATE yy_create_buffer(FILE *file, int size);
void yy_delete_buffer(YY_BUFFER_STATE b);
void yy_flush_buffer(YY_BUFFER_STATE b);
void yypush_buffer_state(YY_BUFFER_STATE new_buffer);
void yypop_buffer_state(void);

static void yyensure_buffer_stack(void);
static void yy_load_buffer_state(void);
static void yy_init_buffer(YY_BUFFER_STATE b, FILE *file);
#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER)

YY_BUFFER_STATE yy_scan_buffer(char *base, yy_size_t size);
YY_BUFFER_STATE yy_scan_string(const char *yy_str);
YY_BUFFER_STATE yy_scan_bytes(const char *bytes, int len);

void *yyalloc(yy_size_t);
void *yyrealloc(void *, yy_size_t);
void yyfree(void *);

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive)                            \
  {                                                                   \
    if (!YY_CURRENT_BUFFER) {                                         \
      yyensure_buffer_stack();                                        \
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE); \
    }                                                                 \
    YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive;     \
  }
#define yy_set_bol(at_bol)                                            \
  {                                                                   \
    if (!YY_CURRENT_BUFFER) {                                         \
      yyensure_buffer_stack();                                        \
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE); \
    }                                                                 \
    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol;                     \
  }
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define lexerwrap() (/*CONSTCOND*/ 1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state(void);
static yy_state_type yy_try_NUL_trans(yy_state_type current_state);
static int yy_get_next_buffer(void);
static void yynoreturn yy_fatal_error(const char *msg);

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION      \
  (yytext_ptr) = yy_bp;          \
  yyleng = (int)(yy_cp - yy_bp); \
  (yy_hold_char) = *yy_cp;       \
  *yy_cp = '\0';                 \
  (yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 59
#define YY_END_OF_BUFFER 60
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info {
  flex_int32_t yy_verify;
  flex_int32_t yy_nxt;
};
static const flex_int16_t yy_accept[198] = {
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  60, 58, 33, 22, 23, 23, 58, 10, 58, 58, 58, 58, 48,
  58, 58, 58, 51, 51, 51, 51, 51, 51, 51, 51, 51, 58, 46, 46, 58, 58, 58, 31, 32, 31, 31, 31, 31, 27, 25,
  27, 27, 27, 19, 20, 19, 21, 59, 19, 19, 19, 4,  59, 2,  3,  5,  8,  7,  9,  55, 51, 56, 49, 28, 24, 50,
  48, 51, 52, 54, 53, 51, 51, 51, 51, 51, 51, 51, 36, 51, 51, 51, 51, 51, 51, 57, 46, 47, 46,

  0,  0,  29, 30, 0,  0,  26, 0,  0,  15, 0,  14, 11, 13, 12, 0,  0,  16, 0,  0,  4,  3,  0,  8,  0,  49,
  0,  0,  48, 51, 51, 51, 51, 51, 41, 51, 51, 38, 51, 51, 51, 51, 0,  0,  0,  46, 0,  0,  0,  0,  0,  0,
  0,  0,  49, 0,  0,  50, 48, 51, 42, 40, 37, 51, 51, 51, 51, 43, 51, 0,  6,  0,  0,  17, 0,  49, 51, 44,
  51, 51, 51, 45, 0,  0,  39, 51, 51, 34, 0,  18, 51, 51, 0,  35, 0,  1,  0

};

static const YY_CHAR yy_ec[256] = {
  0,  1,  1,  2,  1,  1,  1,  1,  1,  3,  4,  1,  1,  5,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
  1,  1,  1,  1,  1,  1,  6,  7,  8,  1,  9,  1,  10, 1,  1,  1,  11, 12, 1,  12, 13, 14, 15, 15, 15, 15,
  15, 15, 15, 15, 16, 16, 1,  1,  17, 18, 19, 1,  1,  20, 20, 20, 20, 21, 20, 22, 22, 22, 22, 22, 22, 22,
  22, 22, 22, 22, 22, 22, 22, 23, 22, 22, 22, 22, 22, 1,  24, 1,  1,  22, 1,  25, 20, 26, 27,

  28, 29, 22, 30, 31, 22, 22, 32, 33, 34, 35, 22, 22, 36, 37, 38, 39, 22, 22, 40, 22, 22, 1,  41, 1,  1,
  1,  42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
  42, 42, 42, 42, 42, 42, 42, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
  42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 1,  1,  44, 45, 45, 45, 45, 45, 45,

  45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46,
  46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 1,  1,  1,  1,  1,  1,  1,  1,
  1,  1,  1};

static const YY_CHAR yy_meta[48] = {0, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
                                    3, 1, 1, 2, 3, 3, 4, 4, 1, 3, 3, 3, 3, 3, 4, 4,
                                    4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1};

static const flex_int16_t yy_base[217] = {
  0,   0,   0,   44,  48,  52,  56,  100, 144, 58,  61,  64,  106, 360, 361, 361, 361, 361, 361, 341,
  361, 0,   348, 34,  40,  58,  339, 338, 337, 0,   317, 81,  87,  24,  325, 317, 315, 44,  309, 41,
  72,  75,  77,  85,  361, 361, 335, 87,  89,  91,  361, 361, 93,  95,  97,  361, 361, 361, 361, 184,
  99,  108, 111, 334, 361, 361, 333, 361, 0,   361, 361, 361, 0,   361, 141, 361, 361, 143, 0,   151,
  361, 361, 361, 309, 319, 314, 306, 310, 305, 306, 0,   313, 300, 310, 297, 308, 306, 361, 117, 128,
  133,

  139, 141, 361, 361, 143, 151, 361, 153, 155, 361, 0,   361, 361, 361, 361, 0,   318, 361, 157, 159,
  318, 317, 316, 0,   194, 198, 200, 188, 212, 301, 296, 287, 290, 256, 0,   266, 259, 0,   251, 261,
  260, 226, 191, 193, 195, 197, 202, 204, 206, 0,   0,   0,   208, 237, 239, 244, 242, 246, 248, 250,
  0,   0,   0,   257, 246, 239, 245, 0,   213, 262, 361, 0,   0,   361, 254, 256, 187, 0,   190, 190,
  183, 0,   0,   0,   0,   170, 159, 0,   0,   361, 136, 270, 0,   0,   277, 361, 361, 294, 298, 302,

  306, 310, 312, 316, 320, 324, 162, 152, 140, 120, 118, 84,  79,  73,  67,  54};

static const flex_int16_t yy_def[217] = {
  0,   197, 1,   198, 198, 199, 199, 200, 200, 201, 201, 202, 202, 197, 197, 197, 197, 197, 197, 197,
  197, 203, 197, 197, 197, 203, 197, 197, 197, 203, 203, 203, 203, 203, 203, 203, 203, 203, 197, 197,
  197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
  197, 197, 197, 204, 197, 197, 205, 197, 206, 197, 197, 197, 203, 197, 197, 197, 197, 197, 25,  203,
  197, 197, 197, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 197, 197, 197,
  197,

  197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 207, 197, 197, 197, 197, 208, 197, 197, 197, 197,
  204, 205, 205, 206, 197, 197, 197, 197, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
  203, 203, 197, 197, 197, 197, 197, 197, 197, 209, 210, 211, 197, 197, 197, 197, 197, 197, 197, 203,
  203, 203, 203, 203, 203, 203, 203, 203, 203, 197, 197, 212, 213, 197, 197, 197, 203, 203, 203, 203,
  203, 203, 214, 215, 203, 203, 203, 203, 216, 197, 203, 203, 215, 203, 197, 197, 0,   197, 197, 197,

  197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197};

static const flex_int16_t yy_nxt[409] = {
  0,   14,  15,  16,  17,  18,  16,  19,  20,  21,  22,  14,  14,  23,  24,  25,  25,  26,  27,  28,
  29,  29,  29,  29,  14,  30,  29,  29,  31,  32,  29,  33,  34,  35,  29,  29,  29,  29,  36,  37,
  29,  38,  14,  39,  40,  41,  42,  43,  45,  74,  74,  75,  45,  90,  76,  46,  51,  193, 91,  46,
  51,  64,  65,  65,  64,  65,  65,  64,  69,  69,  190, 77,  66,  78,  78,  66,  189, 67,  95,  79,
  67,  96,  184, 70,  98,  98,  79,  183, 47,  47,  48,  49,  47,  47,  48,  49,  52,  52,  53,  54,
  52,

  52,  53,  54,  56,  57,  84,  85,  58,  64,  69,  69,  87,  86,  99,  100, 98,  99,  99,  101, 101,
  174, 88,  173, 59,  70,  89,  102, 102, 104, 104, 105, 105, 106, 106, 107, 107, 108, 108, 109, 109,
  118, 118, 172, 60,  60,  61,  62,  56,  57,  119, 119, 58,  120, 120, 151, 74,  74,  126, 126, 98,
  98,  125, 128, 127, 150, 129, 129, 59,  125, 194, 127, 143, 143, 144, 145, 98,  146, 143, 144, 145,
  99,  99,  147, 147, 104, 104, 192, 60,  60,  61,  62,  110, 148, 148, 107, 107, 149, 149, 118, 118,

  153, 153, 159, 159, 191, 154, 111, 112, 155, 155, 188, 157, 126, 126, 158, 158, 187, 113, 156, 114,
  186, 115, 116, 117, 185, 156, 129, 129, 170, 170, 170, 170, 99,  99,  101, 101, 102, 102, 99,  100,
  98,  182, 171, 99,  99,  104, 104, 107, 107, 118, 118, 155, 155, 155, 155, 175, 158, 158, 176, 176,
  158, 158, 159, 159, 170, 170, 170, 170, 176, 176, 176, 176, 195, 195, 195, 195, 181, 180, 171, 195,
  195, 195, 195, 179, 178, 177, 196, 169, 168, 167, 166, 165, 164, 196, 44,  44,  44,  44,  50,  50,

  50,  50,  55,  55,  55,  55,  63,  63,  63,  63,  68,  68,  68,  68,  72,  72,  121, 163, 121, 121,
  123, 162, 123, 123, 124, 161, 124, 124, 160, 122, 122, 122, 152, 142, 141, 140, 139, 138, 137, 136,
  135, 134, 133, 132, 131, 130, 122, 122, 103, 97,  94,  93,  92,  83,  82,  81,  80,  73,  71,  197,
  13,  197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
  197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197,

  197, 197, 197, 197, 197, 197, 197, 197};

static const flex_int16_t yy_chk[409] = {
  0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
  1,   1,   1,   1,   1,   1,   1,   1,   3,   23,  23,  24,  4,   33,  24,  3,   5,   216, 33,  4,
  6,   9,   9,   9,   10,  10,  10,  11,  11,  11,  215, 25,  9,   25,  25,  10,  214, 9,   37,  25,
  10,  37,  213, 11,  39,  39,  25,  212, 3,   3,   3,   3,   4,   4,   4,   4,   5,   5,   5,   5,
  6,

  6,   6,   6,   7,   7,   31,  31,  7,   12,  12,  12,  32,  31,  40,  40,  40,  41,  41,  42,  42,
  211, 32,  210, 7,   12,  32,  43,  43,  47,  47,  48,  48,  49,  49,  52,  52,  53,  53,  54,  54,
  60,  60,  209, 7,   7,   7,   7,   8,   8,   61,  61,  8,   62,  62,  208, 74,  74,  77,  77,  98,
  98,  74,  79,  77,  207, 79,  79,  8,   74,  191, 77,  99,  99,  99,  99,  100, 100, 100, 100, 100,
  101, 101, 102, 102, 105, 105, 187, 8,   8,   8,   8,   59,  106, 106, 108, 108, 109, 109, 119, 119,

  120, 120, 128, 128, 186, 125, 59,  59,  125, 125, 181, 127, 126, 126, 127, 127, 180, 59,  126, 59,
  179, 59,  59,  59,  177, 126, 129, 129, 142, 142, 142, 142, 143, 143, 144, 144, 145, 145, 146, 146,
  146, 169, 142, 147, 147, 148, 148, 149, 149, 153, 153, 154, 154, 155, 155, 156, 157, 157, 156, 156,
  158, 158, 159, 159, 170, 170, 170, 170, 175, 175, 176, 176, 192, 192, 192, 192, 167, 166, 170, 195,
  195, 195, 195, 165, 164, 160, 192, 141, 140, 139, 137, 136, 134, 195, 198, 198, 198, 198, 199, 199,

  199, 199, 200, 200, 200, 200, 201, 201, 201, 201, 202, 202, 202, 202, 203, 203, 204, 133, 204, 204,
  205, 132, 205, 205, 206, 131, 206, 206, 130, 123, 122, 121, 117, 96,  95,  94,  93,  92,  91,  89,
  88,  87,  86,  85,  84,  83,  66,  63,  46,  38,  36,  35,  34,  30,  28,  27,  26,  22,  19,  13,
  197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
  197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197,

  197, 197, 197, 197, 197, 197, 197, 197};

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[60] = {
  0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0,
  0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
};

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "src/core/lexer.l"
/*
 *  OpenSCAD (www.openscad.org)
 *  Copyright (C) 2009-2011 Clifford Wolf <clifford@clifford.at> and
 *                          Marius Kintel <marius@kintel.net>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  As a special exception, you have permission to link this program
 *  with the CGAL library and distribute executables, as long as you
 *  follow the requirements of the GNU GPL in regard to all of the
 *  software in the executable aside from CGAL.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
#define YY_NO_INPUT 1
#line 32 "src/core/lexer.l"

#include "handle_dep.h"
#include "core/str_utf8_wrapper.h"
#include "utils/printutils.h"
#include "core/parsersettings.h"
#include "core/Assignment.h"
#include "parser.hxx"
#include "core/SourceFile.h"
#include <assert.h>
#include <boost/lexical_cast.hpp>
#include <filesystem>
namespace fs = std::filesystem;

// isatty for visual c++ and mingw-cross-env
#if defined __WIN32__ && !defined _MSC_VER
#include "unistd.h"
#endif
#if defined __WIN32__ || defined _MSC_VER
extern "C" int __cdecl _isatty(int _FileHandle);
#define isatty _isatty
#define strdup _strdup
#define fileno _fileno
#endif

std::string stringcontents;
int lexerget_lineno(void);
extern const char *parser_input_buffer;
extern SourceFile *rootfile;

#define YY_INPUT(buf, result, max_size)    \
  {                                        \
    if (yyin && yyin != stdin) {           \
      int c = fgetc(yyin);                 \
      if (c >= 0) {                        \
        result = 1;                        \
        buf[0] = c;                        \
      } else {                             \
        result = YY_NULL;                  \
      }                                    \
    } else {                               \
      if (*parser_input_buffer) {          \
        result = 1;                        \
        buf[0] = *(parser_input_buffer++); \
        parser_error_pos++;                \
      } else {                             \
        result = YY_NULL;                  \
      }                                    \
    }                                      \
  }

/*
  Handle locations.
  Since flex doesn't handle column numbers, we deal with those manually.
  See "Advanced Use of Flex" / "Advanced Use of Bison"
*/
extern YYLTYPE parserlloc;

#define LOCATION(loc) \
  Location(loc.first_line, loc.first_column, loc.last_line, loc.last_column, sourcefile())
#define LOCATION_INIT(loc)                                                                      \
  do {                                                                                          \
    (loc).first_line = (loc).first_column = (loc).last_line = (loc).last_column = yylineno = 1; \
  } while (0)
#define LOCATION_NEXT(loc)                  \
  do {                                      \
    (loc).first_column = (loc).last_column; \
    (loc).first_line = (loc).last_line;     \
  } while (0)
#define LOCATION_ADD_LINES(loc, cnt) \
  do {                               \
    (loc).last_column = 1;           \
    (loc).last_line += cnt;          \
    LOCATION_NEXT(loc);              \
  } while (0)

#define LOCATION_COUNT_LINES(loc, text)     \
  for (int i = 0; (text[i]) != '\0'; i++) { \
    if ((text[i]) == '\n') {                \
      (loc).last_line++;                    \
      (loc).last_column = 1;                \
    }                                       \
  }

#define YY_USER_ACTION parserlloc.last_column += yyleng;

extern void parsererror(char const *s);
void to_utf8(const char *, char *);
void includefile(const Location& loc);
std::shared_ptr<fs::path> sourcefile();
std::shared_ptr<fs::path> parser_sourcefile;
std::vector<std::shared_ptr<fs::path>> filename_stack;
std::vector<YYLTYPE> loc_stack;
std::vector<FILE *> openfiles;
std::vector<std::string> openfilenames;

std::string filename;
std::string filepath;
#line 999 "/home/gsohler/git/pythonscad/build/objects/lexer.cxx"

#line 1001 "/home/gsohler/git/pythonscad/build/objects/lexer.cxx"

#define INITIAL 0
#define cond_comment 1
#define cond_lcomment 2
#define cond_string 3
#define cond_include 4
#define cond_use 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals(void);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy(void);

int yyget_debug(void);

void yyset_debug(int debug_flag);

YY_EXTRA_TYPE yyget_extra(void);

void yyset_extra(YY_EXTRA_TYPE user_defined);

FILE *yyget_in(void);

void yyset_in(FILE *_in_str);

FILE *yyget_out(void);

void yyset_out(FILE *_out_str);

int yyget_leng(void);

char *yyget_text(void);

int yyget_lineno(void);

void yyset_lineno(int _line_number);

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap(void);
#else
extern int yywrap(void);
#endif
#endif

#ifndef YY_NO_UNPUT

#endif

#ifndef yytext_ptr
static void yy_flex_strncpy(char *, const char *, int);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(const char *);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput(void);
#else
static int input(void);
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO                                        \
  do {                                              \
    if (fwrite(yytext, (size_t)yyleng, 1, yyout)) { \
    }                                               \
  } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)                                                      \
  if (YY_CURRENT_BUFFER_LVALUE->yy_is_interactive) {                                         \
    int c = '*';                                                                             \
    int n;                                                                                   \
    for (n = 0; n < max_size && (c = getc(yyin)) != EOF && c != '\n'; ++n) buf[n] = (char)c; \
    if (c == '\n') buf[n++] = (char)c;                                                       \
    if (c == EOF && ferror(yyin)) YY_FATAL_ERROR("input in flex scanner failed");            \
    result = n;                                                                              \
  } else {                                                                                   \
    errno = 0;                                                                               \
    while ((result = (int)fread(buf, 1, (yy_size_t)max_size, yyin)) == 0 && ferror(yyin)) {  \
      if (errno != EINTR) {                                                                  \
        YY_FATAL_ERROR("input in flex scanner failed");                                      \
        break;                                                                               \
      }                                                                                      \
      errno = 0;                                                                             \
      clearerr(yyin);                                                                        \
    }                                                                                        \
  }

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error(msg)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex(void);

#define YY_DECL int yylex(void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/ break;
#endif

#define YY_RULE_SETUP YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
  yy_state_type yy_current_state;
  char *yy_cp, *yy_bp;
  int yy_act;

  if (!(yy_init)) {
    (yy_init) = 1;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    if (!(yy_start)) (yy_start) = 1; /* first start state */

    if (!yyin) yyin = stdin;

    if (!yyout) yyout = stdout;

    if (!YY_CURRENT_BUFFER) {
      yyensure_buffer_stack();
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE);
    }

    yy_load_buffer_state();
  }

  {
#line 134 "src/core/lexer.l"

#line 138 "src/core/lexer.l"
    LOCATION_NEXT(parserlloc);

#line 1229 "/home/gsohler/git/pythonscad/build/objects/lexer.cxx"

    while (/*CONSTCOND*/ 1) /* loops until end-of-file is reached */
    {
      yy_cp = (yy_c_buf_p);

      /* Support of yytext. */
      *yy_cp = (yy_hold_char);

      /* yy_bp points to the position in yy_ch_buf of the start of
       * the current run.
       */
      yy_bp = yy_cp;

      yy_current_state = (yy_start);
    yy_match:
      do {
        YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
        if (yy_accept[yy_current_state]) {
          (yy_last_accepting_state) = yy_current_state;
          (yy_last_accepting_cpos) = yy_cp;
        }
        while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
          yy_current_state = (int)yy_def[yy_current_state];
          if (yy_current_state >= 198) yy_c = yy_meta[yy_c];
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
        ++yy_cp;
      } while (yy_base[yy_current_state] != 361);

    yy_find_action:
      yy_act = yy_accept[yy_current_state];
      if (yy_act == 0) { /* have to back up */
        yy_cp = (yy_last_accepting_cpos);
        yy_current_state = (yy_last_accepting_state);
        yy_act = yy_accept[yy_current_state];
      }

      YY_DO_BEFORE_ACTION;

      if (yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act]) {
        int yyl;
        for (yyl = 0; yyl < yyleng; ++yyl)
          if (yytext[yyl] == '\n') yylineno++;
        ;
      }

    do_action: /* This label is used only to access EOF actions. */

      switch (yy_act) { /* beginning of action switch */
      case 0:           /* must back up */
        /* undo the effects of YY_DO_BEFORE_ACTION */
        *yy_cp = (yy_hold_char);
        yy_cp = (yy_last_accepting_cpos);
        yy_current_state = (yy_last_accepting_state);
        goto yy_find_action;

      case 1:
        /* rule 1 can match eol */
        YY_RULE_SETUP
#line 141 "src/core/lexer.l"
        {
          BEGIN(cond_include);
          filepath = filename = "";
          LOCATION_COUNT_LINES(parserlloc, yytext);
        }
        YY_BREAK

      case 2:
        /* rule 2 can match eol */
        YY_RULE_SETUP
#line 143 "src/core/lexer.l"
        {
          LOCATION_ADD_LINES(parserlloc, yyleng);
          // see merge request #4221
          LOG(message_group::Warning, LOCATION(parserlloc), "",
              "new lines in 'include<>'-statement is not defined - behavior may change in the future");
        }
        YY_BREAK
      case 3: YY_RULE_SETUP
#line 148 "src/core/lexer.l"
        {
          filepath = yytext;
        }
        YY_BREAK
      case 4: YY_RULE_SETUP
#line 149 "src/core/lexer.l"
        {
          filename = yytext;
        }
        YY_BREAK
      case 5: YY_RULE_SETUP
#line 150 "src/core/lexer.l"
        {
          BEGIN(INITIAL);
          includefile(LOCATION(parserlloc));
        }
        YY_BREAK
      case YY_STATE_EOF(cond_include):
#line 151 "src/core/lexer.l"
      {
        parsererror("Unterminated include statement");
        return TOK_ERROR;
      }
        YY_BREAK

      case 6:
        /* rule 6 can match eol */
        YY_RULE_SETUP
#line 155 "src/core/lexer.l"
        {
          BEGIN(cond_use);
          LOCATION_COUNT_LINES(parserlloc, yytext);
        }
        YY_BREAK

      case 7:
        /* rule 7 can match eol */
        YY_RULE_SETUP
#line 157 "src/core/lexer.l"
        {
          LOCATION_ADD_LINES(parserlloc, yyleng);
          // see merge request #4221
          LOG(message_group::Warning, LOCATION(parserlloc), "",
              "new lines 'use<>'-statement is not defined - behavior may change in the future");
        }
        YY_BREAK
      case 8: YY_RULE_SETUP
#line 162 "src/core/lexer.l"
        {
          filename = yytext;
        }
        YY_BREAK
      case 9: YY_RULE_SETUP
#line 163 "src/core/lexer.l"
        {
          BEGIN(INITIAL);
          fs::path fullpath =
            find_valid_path(sourcefile()->parent_path(), fs::path(filename), &openfilenames);
          if (fullpath.empty()) {
            LOG(message_group::Warning, LOCATION(parserlloc), "", "Can't open library '%1$s'.",
                filename);
            parserlval.text = strdup(filename.c_str());
          } else {
            handle_dep(fullpath.generic_string());
            parserlval.text = strdup(fullpath.string().c_str());
          }
          return TOK_USE;
        }
        YY_BREAK
      case YY_STATE_EOF(cond_use):
#line 175 "src/core/lexer.l"
      {
        parsererror("Unterminated use statement");
        return TOK_ERROR;
      }
        YY_BREAK

      case 10: YY_RULE_SETUP
#line 178 "src/core/lexer.l"
        {
          BEGIN(cond_string);
          stringcontents.clear();
        }
        YY_BREAK

      case 11: YY_RULE_SETUP
#line 180 "src/core/lexer.l"
        {
          stringcontents += '\n';
        }
        YY_BREAK
      case 12: YY_RULE_SETUP
#line 181 "src/core/lexer.l"
        {
          stringcontents += '\t';
        }
        YY_BREAK
      case 13: YY_RULE_SETUP
#line 182 "src/core/lexer.l"
        {
          stringcontents += '\r';
        }
        YY_BREAK
      case 14: YY_RULE_SETUP
#line 183 "src/core/lexer.l"
        {
          stringcontents += '\\';
        }
        YY_BREAK
      case 15: YY_RULE_SETUP
#line 184 "src/core/lexer.l"
        {
          stringcontents += '"';
        }
        YY_BREAK
      case 16: YY_RULE_SETUP
#line 185 "src/core/lexer.l"
        { /* parser_error_pos -= strlen(lexertext) - 1; */
          stringcontents += lexertext;
        }
        YY_BREAK
      case 17: YY_RULE_SETUP
#line 186 "src/core/lexer.l"
        {
          unsigned long i = strtoul(lexertext + 2, NULL, 16);
          stringcontents += (i == 0 ? ' ' : (unsigned char)(i & 0xff));
        }
        YY_BREAK
      case 18: YY_RULE_SETUP
#line 187 "src/core/lexer.l"
        {
          const auto c = strtoul(lexertext + 2, NULL, 16);
          stringcontents += str_utf8_wrapper(c).toString();
        }
        YY_BREAK
      case 19: YY_RULE_SETUP
#line 188 "src/core/lexer.l"
        {
          stringcontents += lexertext;
        }
        YY_BREAK
      case 20:
        /* rule 20 can match eol */
        YY_RULE_SETUP
#line 189 "src/core/lexer.l"
        {
          LOCATION_ADD_LINES(parserlloc, yyleng);
        }
        YY_BREAK
      case 21: YY_RULE_SETUP
#line 190 "src/core/lexer.l"
        {
          BEGIN(INITIAL);
          parserlval.text = strdup(stringcontents.c_str());
          return TOK_STRING;
        }
        YY_BREAK
      case YY_STATE_EOF(cond_string):
#line 191 "src/core/lexer.l"
      {
        parsererror("Unterminated string");
        return TOK_ERROR;
      }
        YY_BREAK

      case 22: YY_RULE_SETUP
#line 194 "src/core/lexer.l"
        {
          LOCATION_NEXT(parserlloc);
        }
        YY_BREAK
      case 23:
        /* rule 23 can match eol */
        YY_RULE_SETUP
#line 195 "src/core/lexer.l"
        {
          LOCATION_ADD_LINES(parserlloc, yyleng);
        }
        YY_BREAK
      case 24: YY_RULE_SETUP
#line 197 "src/core/lexer.l"
        {
          BEGIN(cond_lcomment);
        }
        YY_BREAK

      case 25:
        /* rule 25 can match eol */
        YY_RULE_SETUP
#line 199 "src/core/lexer.l"
        {
          BEGIN(INITIAL);
          LOCATION_ADD_LINES(parserlloc, yyleng);
        }
        YY_BREAK
      case 26: YY_RULE_SETUP
#line 200 "src/core/lexer.l"
        { /* parser_error_pos -= strlen(lexertext) - 1; */
        }
        YY_BREAK
      case 27: YY_RULE_SETUP
#line 201 "src/core/lexer.l"

        YY_BREAK

      case 28: YY_RULE_SETUP
#line 204 "src/core/lexer.l"
        BEGIN(cond_comment);
        YY_BREAK

      case 29: YY_RULE_SETUP
#line 206 "src/core/lexer.l"
        {
          BEGIN(INITIAL);
        }
        YY_BREAK
      case 30: YY_RULE_SETUP
#line 207 "src/core/lexer.l"
        { /* parser_error_pos -= strlen(lexertext) - 1; */
        }
        YY_BREAK
      case 31: YY_RULE_SETUP
#line 208 "src/core/lexer.l"

        YY_BREAK
      case 32:
        /* rule 32 can match eol */
        YY_RULE_SETUP
#line 209 "src/core/lexer.l"
        {
          LOCATION_ADD_LINES(parserlloc, yyleng);
        }
        YY_BREAK
      case YY_STATE_EOF(cond_comment):
#line 210 "src/core/lexer.l"
      {
        parsererror("Unterminated comment");
        return TOK_ERROR;
      }
        YY_BREAK

      case YY_STATE_EOF(INITIAL):
      case YY_STATE_EOF(cond_lcomment):
#line 213 "src/core/lexer.l"
      {
        if (!filename_stack.empty()) filename_stack.pop_back();
        if (!loc_stack.empty()) {
          parserlloc = loc_stack.back();
          yylineno = parserlloc.first_line;
          loc_stack.pop_back();
        }
        if (yyin && yyin != stdin) {
          assert(!openfiles.empty());
          fclose(openfiles.back());
          openfiles.pop_back();
          openfilenames.pop_back();
        }
        yypop_buffer_state();
        if (!YY_CURRENT_BUFFER) yyterminate();
      }
        YY_BREAK
      case 33: YY_RULE_SETUP
#line 231 "src/core/lexer.l"
        return TOK_EOT;
        YY_BREAK
      case 34: YY_RULE_SETUP
#line 233 "src/core/lexer.l"
        return TOK_MODULE;
        YY_BREAK
      case 35: YY_RULE_SETUP
#line 234 "src/core/lexer.l"
        return TOK_FUNCTION;
        YY_BREAK
      case 36: YY_RULE_SETUP
#line 235 "src/core/lexer.l"
        return TOK_IF;
        YY_BREAK
      case 37: YY_RULE_SETUP
#line 236 "src/core/lexer.l"
        return TOK_ELSE;
        YY_BREAK
      case 38: YY_RULE_SETUP
#line 237 "src/core/lexer.l"
        return TOK_LET;
        YY_BREAK
      case 39: YY_RULE_SETUP
#line 238 "src/core/lexer.l"
        return TOK_ASSERT;
        YY_BREAK
      case 40: YY_RULE_SETUP
#line 239 "src/core/lexer.l"
        return TOK_ECHO;
        YY_BREAK
      case 41: YY_RULE_SETUP
#line 240 "src/core/lexer.l"
        return TOK_FOR;
        YY_BREAK
      case 42: YY_RULE_SETUP
#line 241 "src/core/lexer.l"
        return TOK_EACH;
        YY_BREAK
      case 43: YY_RULE_SETUP
#line 243 "src/core/lexer.l"
        return TOK_TRUE;
        YY_BREAK
      case 44: YY_RULE_SETUP
#line 244 "src/core/lexer.l"
        return TOK_FALSE;
        YY_BREAK
      case 45: YY_RULE_SETUP
#line 245 "src/core/lexer.l"
        return TOK_UNDEF;
        YY_BREAK
      /*
       U+00A0 (UTF-8 encoded: C2A0) is no-break space. We support it since Qt's QTextEdit
       automatically converts these to spaces and we want to be able to process the same
       files on the cmd-line as in the editor.
      */
      case 46: YY_RULE_SETUP
#line 253 "src/core/lexer.l"

        YY_BREAK
      case 47: YY_RULE_SETUP
#line 255 "src/core/lexer.l"
        {
          parser_error_pos -= strlen(yytext);
          return TOK_ERROR;
        }
        YY_BREAK
      case 48:
#line 258 "src/core/lexer.l"
      case 49:
#line 259 "src/core/lexer.l"
      case 50: YY_RULE_SETUP
#line 259 "src/core/lexer.l"
        {
          try {
            parserlval.number = boost::lexical_cast<double>(yytext);
            return TOK_NUMBER;
          } catch (boost::bad_lexical_cast&) {
          }
        }
        YY_BREAK
      case 51: YY_RULE_SETUP
#line 265 "src/core/lexer.l"
        {
          parserlval.text = strdup(yytext);
          return TOK_ID;
        }
        YY_BREAK
      case 52: YY_RULE_SETUP
#line 267 "src/core/lexer.l"
        return LE;
        YY_BREAK
      case 53: YY_RULE_SETUP
#line 268 "src/core/lexer.l"
        return GE;
        YY_BREAK
      case 54: YY_RULE_SETUP
#line 269 "src/core/lexer.l"
        return EQ;
        YY_BREAK
      case 55: YY_RULE_SETUP
#line 270 "src/core/lexer.l"
        return NEQ;
        YY_BREAK
      case 56: YY_RULE_SETUP
#line 271 "src/core/lexer.l"
        return AND;
        YY_BREAK
      case 57: YY_RULE_SETUP
#line 272 "src/core/lexer.l"
        return OR;
        YY_BREAK
      case 58: YY_RULE_SETUP
#line 274 "src/core/lexer.l"
        {
          return yytext[0];
        }
        YY_BREAK
      case 59: YY_RULE_SETUP
#line 276 "src/core/lexer.l"
        ECHO;
        YY_BREAK
#line 1669 "/home/gsohler/git/pythonscad/build/objects/lexer.cxx"

      case YY_END_OF_BUFFER: {
        /* Amount of text matched not including the EOB char. */
        int yy_amount_of_matched_text = (int)(yy_cp - (yytext_ptr)) - 1;

        /* Undo the effects of YY_DO_BEFORE_ACTION. */
        *yy_cp = (yy_hold_char);
        YY_RESTORE_YY_MORE_OFFSET

        if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW) {
          /* We're scanning a new file or input source.  It's
           * possible that this happened because the user
           * just pointed yyin at a new source and called
           * yylex().  If so, then we have to assure
           * consistency between YY_CURRENT_BUFFER and our
           * globals.  Here is the right place to do so, because
           * this is the first action (other than possibly a
           * back-up) that will match for the new input source.
           */
          (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
          YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
          YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
        }

        /* Note that here we test for yy_c_buf_p "<=" to the position
         * of the first EOB in the buffer, since yy_c_buf_p will
         * already have been incremented past the NUL character
         * (since all states make transitions on EOB to the
         * end-of-buffer state).  Contrast this with the test
         * in input().
         */
        if ((yy_c_buf_p) <=
            &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)]) { /* This was really a NUL. */
          yy_state_type yy_next_state;

          (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

          yy_current_state = yy_get_previous_state();

          /* Okay, we're now positioned to make the NUL
           * transition.  We couldn't have
           * yy_get_previous_state() go ahead and do it
           * for us because it doesn't know how to deal
           * with the possibility of jamming (and we don't
           * want to build jamming into it because then it
           * will run more slowly).
           */

          yy_next_state = yy_try_NUL_trans(yy_current_state);

          yy_bp = (yytext_ptr) + YY_MORE_ADJ;

          if (yy_next_state) {
            /* Consume the NUL. */
            yy_cp = ++(yy_c_buf_p);
            yy_current_state = yy_next_state;
            goto yy_match;
          }

          else {
            yy_cp = (yy_c_buf_p);
            goto yy_find_action;
          }
        }

        else
          switch (yy_get_next_buffer()) {
          case EOB_ACT_END_OF_FILE: {
            (yy_did_buffer_switch_on_eof) = 0;

            if (yywrap()) {
              /* Note: because we've taken care in
               * yy_get_next_buffer() to have set up
               * yytext, we can now set up
               * yy_c_buf_p so that if some total
               * hoser (like flex itself) wants to
               * call the scanner after we return the
               * YY_NULL, it'll still work - another
               * YY_NULL will get returned.
               */
              (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

              yy_act = YY_STATE_EOF(YY_START);
              goto do_action;
            }

            else {
              if (!(yy_did_buffer_switch_on_eof)) YY_NEW_FILE;
            }
            break;
          }

          case EOB_ACT_CONTINUE_SCAN:
            (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

            yy_current_state = yy_get_previous_state();

            yy_cp = (yy_c_buf_p);
            yy_bp = (yytext_ptr) + YY_MORE_ADJ;
            goto yy_match;

          case EOB_ACT_LAST_MATCH:
            (yy_c_buf_p) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

            yy_current_state = yy_get_previous_state();

            yy_cp = (yy_c_buf_p);
            yy_bp = (yytext_ptr) + YY_MORE_ADJ;
            goto yy_find_action;
          }
        break;
      }

      default: YY_FATAL_ERROR("fatal flex scanner internal error--no action found");
      } /* end of action switch */
    } /* end of scanning one token */
  } /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer(void)
{
  char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
  char *source = (yytext_ptr);
  int number_to_move, i;
  int ret_val;

  if ((yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1])
    YY_FATAL_ERROR("fatal flex scanner internal error--end of buffer missed");

  if (YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer ==
      0) { /* Don't try to fill the buffer, so this is an EOF. */
    if ((yy_c_buf_p) - (yytext_ptr)-YY_MORE_ADJ == 1) {
      /* We matched a single character, the EOB, so
       * treat this as a final EOF.
       */
      return EOB_ACT_END_OF_FILE;
    }

    else {
      /* We matched some text prior to the EOB, first
       * process it.
       */
      return EOB_ACT_LAST_MATCH;
    }
  }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int)((yy_c_buf_p) - (yytext_ptr)-1);

  for (i = 0; i < number_to_move; ++i) *(dest++) = *(source++);

  if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING)
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

  else {
    int num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

    while (num_to_read <= 0) { /* Not enough room in the buffer - grow it. */

      /* just a shorter name for the current buffer */
      YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

      int yy_c_buf_p_offset = (int)((yy_c_buf_p)-b->yy_ch_buf);

      if (b->yy_is_our_buffer) {
        int new_size = b->yy_buf_size * 2;

        if (new_size <= 0) b->yy_buf_size += b->yy_buf_size / 8;
        else b->yy_buf_size *= 2;

        b->yy_ch_buf = (char *)
          /* Include room in for 2 EOB chars. */
          yyrealloc((void *)b->yy_ch_buf, (yy_size_t)(b->yy_buf_size + 2));
      } else /* Can't grow it, we don't own it. */
        b->yy_ch_buf = NULL;

      if (!b->yy_ch_buf) YY_FATAL_ERROR("fatal error - scanner input buffer overflow");

      (yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

      num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
    }

    if (num_to_read > YY_READ_BUF_SIZE) num_to_read = YY_READ_BUF_SIZE;

    /* Read in more data. */
    YY_INPUT((&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]), (yy_n_chars), num_to_read);

    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  if ((yy_n_chars) == 0) {
    if (number_to_move == YY_MORE_ADJ) {
      ret_val = EOB_ACT_END_OF_FILE;
      yyrestart(yyin);
    }

    else {
      ret_val = EOB_ACT_LAST_MATCH;
      YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_EOF_PENDING;
    }
  }

  else
    ret_val = EOB_ACT_CONTINUE_SCAN;

  if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
    /* Extend the array by 50%, plus the number we really need. */
    int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf =
      (char *)yyrealloc((void *)YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t)new_size);
    if (!YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
      YY_FATAL_ERROR("out of dynamic memory in yy_get_next_buffer()");
    /* "- 2" to take care of EOB's */
    YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int)(new_size - 2);
  }

  (yy_n_chars) += number_to_move;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

  (yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

  return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state(void)
{
  yy_state_type yy_current_state;
  char *yy_cp;

  yy_current_state = (yy_start);

  for (yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp) {
    YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
    if (yy_accept[yy_current_state]) {
      (yy_last_accepting_state) = yy_current_state;
      (yy_last_accepting_cpos) = yy_cp;
    }
    while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
      yy_current_state = (int)yy_def[yy_current_state];
      if (yy_current_state >= 198) yy_c = yy_meta[yy_c];
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
  }

  return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans(yy_state_type yy_current_state)
{
  int yy_is_jam;
  char *yy_cp = (yy_c_buf_p);

  YY_CHAR yy_c = 1;
  if (yy_accept[yy_current_state]) {
    (yy_last_accepting_state) = yy_current_state;
    (yy_last_accepting_cpos) = yy_cp;
  }
  while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
    yy_current_state = (int)yy_def[yy_current_state];
    if (yy_current_state >= 198) yy_c = yy_meta[yy_c];
  }
  yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
  yy_is_jam = (yy_current_state == 197);

  return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput(void)
#else
static int input(void)
#endif

{
  int c;

  *(yy_c_buf_p) = (yy_hold_char);

  if (*(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR) {
    /* yy_c_buf_p now points to the character we want to return.
     * If this occurs *before* the EOB characters, then it's a
     * valid NUL; if not, then we've hit the end of the buffer.
     */
    if ((yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)]) /* This was really a NUL. */
      *(yy_c_buf_p) = '\0';

    else { /* need more input */ int offset = (int)((yy_c_buf_p) - (yytext_ptr));
      ++(yy_c_buf_p);

      switch (yy_get_next_buffer()) {
      case EOB_ACT_LAST_MATCH:
        /* This happens because yy_g_n_b()
         * sees that we've accumulated a
         * token and flags that we need to
         * try matching the token before
         * proceeding.  But for input(),
         * there's no matching to consider.
         * So convert the EOB_ACT_LAST_MATCH
         * to EOB_ACT_END_OF_FILE.
         */

        /* Reset buffer status. */
        yyrestart(yyin);

        /*FALLTHROUGH*/

      case EOB_ACT_END_OF_FILE: {
        if (yywrap()) return 0;

        if (!(yy_did_buffer_switch_on_eof)) YY_NEW_FILE;
#ifdef __cplusplus
        return yyinput();
#else
        return input();
#endif
      }

      case EOB_ACT_CONTINUE_SCAN: (yy_c_buf_p) = (yytext_ptr) + offset; break;
      }
    }
  }

  c = *(unsigned char *)(yy_c_buf_p); /* cast for 8-bit char's */
  *(yy_c_buf_p) = '\0';               /* preserve yytext */
  (yy_hold_char) = *++(yy_c_buf_p);

  if (c == '\n') yylineno++;
  ;

  return c;
}
#endif /* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyrestart(FILE *input_file)
{
  if (!YY_CURRENT_BUFFER) {
    yyensure_buffer_stack();
    YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE);
  }

  yy_init_buffer(YY_CURRENT_BUFFER, input_file);
  yy_load_buffer_state();
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
{
  /* TODO. We should be able to replace this entire function body
   * with
   *		yypop_buffer_state();
   *		yypush_buffer_state(new_buffer);
   */
  yyensure_buffer_stack();
  if (YY_CURRENT_BUFFER == new_buffer) return;

  if (YY_CURRENT_BUFFER) {
    /* Flush out information for old buffer. */
    *(yy_c_buf_p) = (yy_hold_char);
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  YY_CURRENT_BUFFER_LVALUE = new_buffer;
  yy_load_buffer_state();

  /* We don't actually know whether we did this switch during
   * EOF (yywrap()) processing, but the only time this flag
   * is looked at is after yywrap() is called, so it's safe
   * to go ahead and always set it.
   */
  (yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state(void)
{
  (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
  (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
  yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
  (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yy_create_buffer(FILE *file, int size)
{
  YY_BUFFER_STATE b;

  b = (YY_BUFFER_STATE)yyalloc(sizeof(struct yy_buffer_state));
  if (!b) YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_buf_size = size;

  /* yy_ch_buf has to be 2 characters longer than the size given because
   * we need to put in 2 end-of-buffer characters.
   */
  b->yy_ch_buf = (char *)yyalloc((yy_size_t)(b->yy_buf_size + 2));
  if (!b->yy_ch_buf) YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_is_our_buffer = 1;

  yy_init_buffer(b, file);

  return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
void yy_delete_buffer(YY_BUFFER_STATE b)
{
  if (!b) return;

  if (b == YY_CURRENT_BUFFER) /* Not sure if we should pop here. */
    YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE)0;

  if (b->yy_is_our_buffer) yyfree((void *)b->yy_ch_buf);

  yyfree((void *)b);
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
static void yy_init_buffer(YY_BUFFER_STATE b, FILE *file)

{
  int oerrno = errno;

  yy_flush_buffer(b);

  b->yy_input_file = file;
  b->yy_fill_buffer = 1;

  /* If b is the current buffer, then yy_init_buffer was _probably_
   * called from yyrestart() or through yy_get_next_buffer.
   * In that case, we don't want to reset the lineno or column.
   */
  if (b != YY_CURRENT_BUFFER) {
    b->yy_bs_lineno = 1;
    b->yy_bs_column = 0;
  }

  b->yy_is_interactive = file ? (isatty(fileno(file)) > 0) : 0;

  errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void yy_flush_buffer(YY_BUFFER_STATE b)
{
  if (!b) return;

  b->yy_n_chars = 0;

  /* We always need two end-of-buffer characters.  The first causes
   * a transition to the end-of-buffer state.  The second causes
   * a jam in that state.
   */
  b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
  b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

  b->yy_buf_pos = &b->yy_ch_buf[0];

  b->yy_at_bol = 1;
  b->yy_buffer_status = YY_BUFFER_NEW;

  if (b == YY_CURRENT_BUFFER) yy_load_buffer_state();
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yypush_buffer_state(YY_BUFFER_STATE new_buffer)
{
  if (new_buffer == NULL) return;

  yyensure_buffer_stack();

  /* This block is copied from yy_switch_to_buffer. */
  if (YY_CURRENT_BUFFER) {
    /* Flush out information for old buffer. */
    *(yy_c_buf_p) = (yy_hold_char);
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  /* Only push if top exists. Otherwise, replace top. */
  if (YY_CURRENT_BUFFER) (yy_buffer_stack_top)++;
  YY_CURRENT_BUFFER_LVALUE = new_buffer;

  /* copied from yy_switch_to_buffer. */
  yy_load_buffer_state();
  (yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yypop_buffer_state(void)
{
  if (!YY_CURRENT_BUFFER) return;

  yy_delete_buffer(YY_CURRENT_BUFFER);
  YY_CURRENT_BUFFER_LVALUE = NULL;
  if ((yy_buffer_stack_top) > 0) --(yy_buffer_stack_top);

  if (YY_CURRENT_BUFFER) {
    yy_load_buffer_state();
    (yy_did_buffer_switch_on_eof) = 1;
  }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack(void)
{
  yy_size_t num_to_alloc;

  if (!(yy_buffer_stack)) {
    /* First allocation is just for 2 elements, since we don't know if this
     * scanner will even need a stack. We use 2 instead of 1 to avoid an
     * immediate realloc on the next call.
     */
    num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
    (yy_buffer_stack) =
      (struct yy_buffer_state **)yyalloc(num_to_alloc * sizeof(struct yy_buffer_state *));
    if (!(yy_buffer_stack)) YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

    memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state *));

    (yy_buffer_stack_max) = num_to_alloc;
    (yy_buffer_stack_top) = 0;
    return;
  }

  if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1) {
    /* Increase the buffer to prepare for a possible push. */
    yy_size_t grow_size = 8 /* arbitrary grow size */;

    num_to_alloc = (yy_buffer_stack_max) + grow_size;
    (yy_buffer_stack) = (struct yy_buffer_state **)yyrealloc(
      (yy_buffer_stack), num_to_alloc * sizeof(struct yy_buffer_state *));
    if (!(yy_buffer_stack)) YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

    /* zero only the new slots.*/
    memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state *));
    (yy_buffer_stack_max) = num_to_alloc;
  }
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer(char *base, yy_size_t size)
{
  YY_BUFFER_STATE b;

  if (size < 2 || base[size - 2] != YY_END_OF_BUFFER_CHAR || base[size - 1] != YY_END_OF_BUFFER_CHAR)
    /* They forgot to leave room for the EOB's. */
    return NULL;

  b = (YY_BUFFER_STATE)yyalloc(sizeof(struct yy_buffer_state));
  if (!b) YY_FATAL_ERROR("out of dynamic memory in yy_scan_buffer()");

  b->yy_buf_size = (int)(size - 2); /* "- 2" to take care of EOB's */
  b->yy_buf_pos = b->yy_ch_buf = base;
  b->yy_is_our_buffer = 0;
  b->yy_input_file = NULL;
  b->yy_n_chars = b->yy_buf_size;
  b->yy_is_interactive = 0;
  b->yy_at_bol = 1;
  b->yy_fill_buffer = 0;
  b->yy_buffer_status = YY_BUFFER_NEW;

  yy_switch_to_buffer(b);

  return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string(const char *yystr) { return yy_scan_bytes(yystr, (int)strlen(yystr)); }

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes(const char *yybytes, int _yybytes_len)
{
  YY_BUFFER_STATE b;
  char *buf;
  yy_size_t n;
  int i;

  /* Get memory for full buffer, including space for trailing EOB's. */
  n = (yy_size_t)(_yybytes_len + 2);
  buf = (char *)yyalloc(n);
  if (!buf) YY_FATAL_ERROR("out of dynamic memory in yy_scan_bytes()");

  for (i = 0; i < _yybytes_len; ++i) buf[i] = yybytes[i];

  buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

  b = yy_scan_buffer(buf, n);
  if (!b) YY_FATAL_ERROR("bad buffer in yy_scan_bytes()");

  /* It's okay to grow etc. this buffer, and we should throw it
   * away when we're done.
   */
  b->yy_is_our_buffer = 1;

  return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error(const char *msg)
{
  fprintf(stderr, "%s\n", msg);
  exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n)                             \
  do {                                        \
    /* Undo effects of setting up yytext. */  \
    int yyless_macro_arg = (n);               \
    YY_LESS_LINENO(yyless_macro_arg);         \
    yytext[yyleng] = (yy_hold_char);          \
    (yy_c_buf_p) = yytext + yyless_macro_arg; \
    (yy_hold_char) = *(yy_c_buf_p);           \
    *(yy_c_buf_p) = '\0';                     \
    yyleng = yyless_macro_arg;                \
  } while (0)

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int yyget_lineno(void) { return yylineno; }

/** Get the input stream.
 *
 */
FILE *yyget_in(void) { return yyin; }

/** Get the output stream.
 *
 */
FILE *yyget_out(void) { return yyout; }

/** Get the length of the current token.
 *
 */
int yyget_leng(void) { return yyleng; }

/** Get the current token.
 *
 */

char *yyget_text(void) { return yytext; }

/** Set the current line number.
 * @param _line_number line number
 *
 */
void yyset_lineno(int _line_number) { yylineno = _line_number; }

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 *
 * @see yy_switch_to_buffer
 */
void yyset_in(FILE *_in_str) { yyin = _in_str; }

void yyset_out(FILE *_out_str) { yyout = _out_str; }

int yyget_debug(void) { return yy_flex_debug; }

void yyset_debug(int _bdebug) { yy_flex_debug = _bdebug; }

static int yy_init_globals(void)
{
  /* Initialization is the same as for the non-reentrant scanner.
   * This function is called from yylex_destroy(), so don't allocate here.
   */

  /* We do not touch yylineno unless the option is enabled. */
  yylineno = 1;

  (yy_buffer_stack) = NULL;
  (yy_buffer_stack_top) = 0;
  (yy_buffer_stack_max) = 0;
  (yy_c_buf_p) = NULL;
  (yy_init) = 0;
  (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
  yyin = stdin;
  yyout = stdout;
#else
  yyin = NULL;
  yyout = NULL;
#endif

  /* For future reference: Set errno on error, since we are called by
   * yylex_init()
   */
  return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy(void)
{
  /* Pop the buffer stack, destroying each element. */
  while (YY_CURRENT_BUFFER) {
    yy_delete_buffer(YY_CURRENT_BUFFER);
    YY_CURRENT_BUFFER_LVALUE = NULL;
    yypop_buffer_state();
  }

  /* Destroy the stack itself. */
  yyfree((yy_buffer_stack));
  (yy_buffer_stack) = NULL;

  /* Reset the globals. This is important in a non-reentrant scanner so the next time
   * yylex() is called, initialization will occur. */
  yy_init_globals();

  return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy(char *s1, const char *s2, int n)
{
  int i;
  for (i = 0; i < n; ++i) s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(const char *s)
{
  int n;
  for (n = 0; s[n]; ++n);

  return n;
}
#endif

void *yyalloc(yy_size_t size) { return malloc(size); }

void *yyrealloc(void *ptr, yy_size_t size)
{
  /* The cast to (char *) in the following accommodates both
   * implementations that use char* generic pointers, and those
   * that use void* generic pointers.  It works with the latter
   * because both ANSI C and C++ allow castless assignment from
   * any pointer type to void*, and deal with argument conversions
   * as though doing an assignment.
   */
  return realloc(ptr, size);
}

void yyfree(void *ptr) { free((char *)ptr); /* see yyrealloc() for (char *) cast */ }

#define YYTABLES_NAME "yytables"

#line 276 "src/core/lexer.l"

void lexer_set_parser_sourcefile(const fs::path& path)
{
  parser_sourcefile = std::make_shared<fs::path>(path);
}

// Filename of the source file currently being lexed.
std::shared_ptr<fs::path> sourcefile()
{
  if (!filename_stack.empty()) return filename_stack.back();

  return parser_sourcefile;
}

bool lexer_is_main_file() { return loc_stack.empty(); }

/*
  Rules for include <path/file>
  1) include <sourcepath/path/file>
  2) include <librarydir/path/file>

  Globals used: filepath, sourcefile, filename
 */
void includefile(const Location& loc)
{
  fs::path localpath = fs::path(filepath) / filename;
  fs::path fullpath = find_valid_path(sourcefile()->parent_path(), localpath, &openfilenames);
  if (!fullpath.empty()) {
    rootfile->registerInclude(localpath.generic_string(), fullpath.generic_string(),
                              lexer_is_main_file() ? loc : Location::NONE);
  } else {
    rootfile->registerInclude(localpath.generic_string(), localpath.generic_string(), Location::NONE);
    LOG(message_group::Warning, LOCATION(parserlloc), "", "Can't open include file '%1$s'.",
        localpath.generic_string());
    return;
  };

  std::string fullname = fullpath.generic_string();

  filepath.clear();
  filename_stack.push_back(std::make_shared<fs::path>(fullpath));

  handle_dep(fullname);

  yyin = fopen(fullname.c_str(), "r");
  if (!yyin) {
    LOG(message_group::Warning, LOCATION(parserlloc), "", "Can't open include file '%1$s'.",
        localpath.generic_string());
    filename_stack.pop_back();
    return;
  }

  loc_stack.push_back(parserlloc);
  LOCATION_INIT(parserlloc);
  openfiles.push_back(yyin);
  openfilenames.push_back(fullname);
  filename.clear();

  yypush_buffer_state(yy_create_buffer(yyin, YY_BUF_SIZE));
}

/*!
  In case of an error, this will make sure we clean up our custom data structures
  and close all files.
*/
void lexerdestroy()
{
  for (auto f : openfiles) fclose(f);
  openfiles.clear();
  openfilenames.clear();
  filename_stack.clear();
  loc_stack.clear();
}
