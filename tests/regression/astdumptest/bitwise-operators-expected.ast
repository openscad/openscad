assert(((12 & 5) == 4));
assert(((12 | 5) == 13));
assert(((2 << 3) == 16));
assert(((16 >> 2) == 4));
assert((~5 == ((2 ^ 32) - 6)));
assert(((1 << (3 + 1)) == (1 << (3 + 1))));
assert(((1 << (3 + 1)) != ((1 << 3) + 1)));
assert((((1 + 1) << 3) == ((1 + 1) << 3)));
assert((((1 + 1) << 3) != (1 + (1 << 3))));
assert((((3 << 1) & 14) == ((3 << 1) & 14)));
assert((((3 << 1) & 14) != (3 << (1 & 14))));
assert(((14 & (3 << 1)) == (14 & (3 << 1))));
assert(((14 & (3 << 1)) != ((14 & 3) << 1)));
assert((((1 & 2) | 3) == ((1 & 2) | 3)));
assert((((1 & 2) | 3) != (1 & (2 | 3))));
assert(((3 | (1 & 2)) == (3 | (1 & 2))));
assert(((3 | (1 & 2)) != ((3 | 1) & 2)));
echo("Expect two warnings:");
assert((((1 | 2) > 3) == ((1 | 2) > 3)));
assert((((1 | 2) > 3) != (1 | (2 > 3))));
assert(((3 > (2 | 1)) == (3 > (1 | 2))));
assert(((3 > (2 | 1)) != ((3 > 1) | 2)));
assert((((1 | 2) | 3) == ((1 | 2) | 3)));
assert((((1 | 2) | 3) == (1 | (2 | 3))));
assert((((15 & 6) & 3) == ((15 & 6) & 3)));
assert((((15 & 6) & 3) == (15 & (6 & 3))));
assert((((1 << 2) << 3) == ((1 << 2) << 3)));
assert((((1 << 2) << 3) != (1 << (2 << 3))));
assert((((65536 >> 2) >> 3) == ((65536 >> 2) >> 3)));
assert((((65536 >> 2) >> 3) != (65536 >> (2 >> 3))));
assert((((65536 >> 4) << 1) == ((65536 >> 4) << 1)));
assert((((65536 >> 4) << 1) != (65536 >> (4 << 1))));
assert((((65536 << 4) >> 1) == ((65536 << 4) >> 1)));
assert((((65536 << 4) >> 1) != (65536 << (4 >> 1))));
assert(((-1 | 0) == ((2 ^ 32) - 1)));
assert(((-1 | 0) == ~0));
assert(((-(2 ^ 31) | 0) == (2 ^ 31)));
assert(((1.4 | 0) == 1));
assert(((1.6 | 0) == 1));
assert(((-1.4 & 3) == 3));
assert(((-1.6 & 3) == 3));
assert((((1 << 16) << 16) == 0));
assert(((1 >> 1) == 0));
assert(((((2 ^ 32) + 1) | 0) == 1));
assert((((-(2 ^ 32) - 1) | 0) == ((2 ^ 32) - 1)));
echo("Expect warnings:");
assert(is_undef((1 << 32)));
assert(is_undef((1 << -1)));
assert(is_undef((1 >> 32)));
assert(is_undef((1 >> -1)));
assert(is_undef((1 | "hello")));
assert(is_undef(("hello" | 1)));
assert(is_undef((1 & "hello")));
assert(is_undef(("hello" & 1)));
assert(is_undef((1 << "hello")));
assert(is_undef(("hello" << 1)));
assert(is_undef((1 >> "hello")));
assert(is_undef(("hello" >> 1)));
assert(is_undef(~"hello"));
