{
  "name": "OpenSCAD (Debian)",
  "build": {
    "dockerfile": "Dockerfile",
    // Build docker container using the scripts directory as context,
    // in order that it can copy the install dependencies script.
    "context": "../scripts"
  },

  // Sanity check on startup.
  // Intentionally executed outside of the docker build
  // so that changes to required dependencies will be flagged
  // and prompt users to rebuild the container.
  "postStartCommand": "./scripts/check-dependencies.sh",

  "customizations": {
    "vscode": {
      "extensions": [
        // C++ extension pack (includes CMake extension).
        "ms-vscode.cpptools-extension-pack"
      ]
    }
  },

  /*
    Configuration to allow OpenSCAD running inside the container to connect to host display.

    Some background information on this configuration was found at:
    - For Wayland: https://universal-blue.discourse.group/t/devcontainer-for-developing-an-application-with-a-gui/4634/4
    - For X11 (Legacy): https://github.com/microsoft/vscode-remote-release/issues/550#issuecomment-501293753

    Setting this up in April 2025 we found that some of the properties mentioned above are
    already being set by the VSCode Dev Containers extension, so we do not set them below.
    When running via the devcontainer CLI or other IDE which does not set those properties
    you may need to uncomment them.

    I expect eventually that support for GUI apps in Dev Containers will get better and
    more consistent between tools, and hopefully some of this configuration can be removed.
  */
  "runArgs": [
    "--network=host",
    // Required for accelerated 3D.
    "--device=/dev/dri"
    // Uncomment if using in devcontainer CLI or other IDE which doesn't set these automatically.
    //"--env=DISPLAY=${localEnv:DISPLAY}",
    //"--env=WAYLAND_DISPLAY=${localEnv:WAYLAND_DISPLAY}",
  ],
  "mounts": [
    "source=${localEnv:XAUTHORITY},target=/home/vscode/.Xauthority,type=bind,consistency=cached"
  ]
}
