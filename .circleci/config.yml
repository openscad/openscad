version: 2
jobs:
  openscad-mxe-32bit:
    working_directory: ~/workspace
    docker:
      - image: openscad/mxe-i686-gui:latest
    steps:
      - checkout
      - run:
          name: Build OpenSCAD Windows Application (32bit)
          no_output_timeout: 18000
          command: |
              export NUMCPU=2
              export MXEDIR=/mxe
              export LIB3MF_INCLUDEDIR=/mxe/usr/i686-w64-mingw32.static.posix/include/lib3mf
              export LIB3MF_LIBDIR=/mxe/usr/i686-w64-mingw32.static.posix/lib
              if [ x"${CIRCLE_BRANCH}" = xmaster ]; then export SUFFIX=""; else export SUFFIX="_$(echo ${CIRCLE_BRANCH} | sed -e 's,pull/,PR,')"; fi
              export OPENSCAD_VERSION="$(date +%Y.%m.%d).ci${CIRCLE_BUILD_NUM}"
              ./scripts/release-common.sh -snapshot -mingw32 -v "$OPENSCAD_VERSION"
              mkdir -p /tmp/out
              for f in mingw*/*.zip mingw*/*.exe; do N=$(basename "$f" | sed -e "s/\\(-x86-[36][24]\\)/\\1${SUFFIX}/;"); cp -iv "$f" /tmp/out/"$N"; done
              if [ -n "${CODE_SIGNING_KEY}" ]; then
                  cd /tmp/out
                  echo $CODE_SIGNING_DATA | base64 -d | gzip -d | gpg --import --allow-secret-key-import --pinentry-mode loopback --passphrase-file <(echo $CODE_SIGNING_PW)
                  export GPG_ARGS="--batch --yes --passphrase-fd 0 --pinentry-mode loopback --detach-sign --armor"
                  for a in *.exe *.zip; do echo "$CODE_SIGNING_PW" | gpg -u "$CODE_SIGNING_KEY" $GPG_ARGS "$a"; sha256sum "$a" | tee "${a}.sha256"; sha512sum "$a" | tee "${a}.sha512"; done
                  rm -rf ~/.gnupg
              else
                  echo "Skipping code signing."
              fi
      - store_artifacts:
          path: /tmp/out
          destination: 32-bit
  openscad-mxe-64bit:
    working_directory: ~/workspace
    docker:
      - image: openscad/mxe-x86_64-gui:latest
    steps:
      - checkout
      - run:
          name: Build OpenSCAD Windows Application (64bit)
          no_output_timeout: 18000
          command: |
              export NUMCPU=2
              export MXEDIR=/mxe
              export LIB3MF_INCLUDEDIR=/mxe/usr/x86_64-w64-mingw32.static.posix/include/lib3mf
              export LIB3MF_LIBDIR=/mxe/usr/x86_64-w64-mingw32.static.posix/lib
              if [ x"${CIRCLE_BRANCH}" = xmaster ]; then export SUFFIX=""; else export SUFFIX="_$(echo ${CIRCLE_BRANCH} | sed -e 's,pull/,PR,')"; fi
              export OPENSCAD_VERSION="$(date +%Y.%m.%d).ci${CIRCLE_BUILD_NUM}"
              ./scripts/release-common.sh -snapshot -mingw64 -v "$OPENSCAD_VERSION"
              mkdir -p /tmp/out
              for f in mingw*/*.zip mingw*/*.exe; do N=$(basename "$f" | sed -e "s/\\(-x86-[36][24]\\)/\\1${SUFFIX}/;"); cp -iv "$f" /tmp/out/"$N"; done
              if [ -n "${CODE_SIGNING_KEY}" ]; then
                  cd /tmp/out
                  echo $CODE_SIGNING_DATA | base64 -d | gzip -d | gpg --import --allow-secret-key-import --pinentry-mode loopback --passphrase-file <(echo $CODE_SIGNING_PW)
                  export GPG_ARGS="--batch --yes --passphrase-fd 0 --pinentry-mode loopback --detach-sign --armor"
                  for a in *.exe *.zip; do echo "$CODE_SIGNING_PW" | gpg -u "$CODE_SIGNING_KEY" $GPG_ARGS "$a"; sha256sum "$a" | tee "${a}.sha256"; sha512sum "$a" | tee "${a}.sha512"; done
                  rm -rf ~/.gnupg
              else
                  echo "Skipping code signing."
              fi
      - store_artifacts:
          path: /tmp/out
          destination: 64-bit
  openscad-appimage-64bit:
    working_directory: ~/workspace
    docker:
      - image: openscad/appimage-x86_64-base:latest
    steps:
      - checkout
      - run:
          name: Build OpenSCAD AppImage (64bit)
          no_output_timeout: 18000
          command: |
              set +e
              . /opt/qt5*/bin/qt5*-env.sh
              set -e
              export OPENSCAD_COMMIT=$(git log -1 --pretty=format:%h)
              export OPENSCAD_VERSION="$(date +%Y.%m.%d).ai${CIRCLE_BUILD_NUM}"
              if [ x"${CIRCLE_BRANCH}" = xmaster ]; then export SUFFIX=""; else export SUFFIX="_$(echo ${CIRCLE_BRANCH} | sed -e 's,pull/,PR,')"; fi
              git submodule update --init
              mkdir build && cd build
              cmake .. -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release -DEXPERIMENTAL=ON -DSNAPSHOT=ON -DOPENSCAD_VERSION="$OPENSCAD_VERSION" -DOPENSCAD_COMMIT="$OPENSCAD_COMMIT"
              make -j2
              make install DESTDIR=../AppDir
              cd ..
              export PATH=/appimage/usr/bin:"$PATH"
              export EXTRA_QT_PLUGINS=svg
              VERSION="$OPENSCAD_VERSION" linuxdeploy --plugin qt --output appimage --appdir AppDir
              mkdir -p /tmp/out
              for f in OpenSCAD-*.AppImage; do N=$(basename "$f" | sed -e "s/OpenSCAD-\\(.*\\)/OpenSCAD-${OPENSCAD_VERSION}-${SUFFIX}\\1/;"); cp -iv "$f" /tmp/out/"$N"; done
              if [ -n "${CODE_SIGNING_KEY}" ]; then
                  cd /tmp/out
                  echo $CODE_SIGNING_DATA | base64 -d | gzip -d | gpg --import --allow-secret-key-import --pinentry-mode loopback --passphrase-file <(echo $CODE_SIGNING_PW)
                  export GPG_ARGS="--batch --yes --passphrase-fd 0 --pinentry-mode loopback --detach-sign --armor"
                  for a in *.AppImage; do echo "$CODE_SIGNING_PW" | gpg -u "$CODE_SIGNING_KEY" $GPG_ARGS "$a"; sha256sum "$a" | tee "${a}.sha256"; sha512sum "$a" | tee "${a}.sha512"; done
                  rm -rf ~/.gnupg
              else
                  echo "Skipping code signing."
              fi
      - store_artifacts:
          path: /tmp/out
          destination: 64-bit
  openscad-macos:
    macos:
      xcode: 12.5.1
    steps:
      - checkout
      - run: git submodule update --init
      - run:
          name: System Info
          command: |
            system_profiler SPHardwareDataType SPSoftwareDataType SPStorageDataType SPDeveloperToolsDataType
      - run:
          name: Install Homebrew packages
          command: |
            brew update
            brew install automake libtool cmake pkg-config
      - restore_cache:
          keys:
            - macos-libraries2-{{ checksum "scripts/macosx-build-dependencies.sh" }}-{{ checksum ".circleci/config.yml" }}
            - macos-libraries2-
      - run:
          name: Build Dependencies
          command: |
            export OPENSCAD_LIBRARIES=/Users/distiller/libraries/install
            export PKG_CONFIG_PATH="$OPENSCAD_LIBRARIES/lib/pkgconfig"
            export DYLD_LIBRARY_PATH="$OPENSCAD_LIBRARIES/lib"
            export DYLD_FRAMEWORK_PATH="$OPENSCAD_LIBRARIES/lib"
            echo "PWD = $CI_BASEDIR"
            echo "PATH = $PATH"
            echo "DYLD_LIBRARY_PATH: $DYLD_LIBRARY_PATH"
            # Pick up our own Qt
            export PATH=$OPENSCAD_LIBRARIES/bin:$PATH
            ./scripts/macosx-build-dependencies.sh -d double_conversion eigen gmp mpfr glew gettext libffi freetype ragel harfbuzz libzip libxml2 libuuid fontconfig hidapi lib3mf pixman cairo glib2 boost cgal qt5 opencsg qscintilla sparkle
      - run:
          name: Package Dependencies as an artifact
          command: |
            export OPENSCAD_LIBRARIES=/Users/distiller/libraries/install
            export LIBRARIES_CACHE=libraries-circleci.tar.bz2
            mkdir -p /tmp/out
            tar cz -C "$OPENSCAD_LIBRARIES" -f /tmp/out/"$LIBRARIES_CACHE" .
            shasum -a 512 /tmp/out/"$LIBRARIES_CACHE" > /tmp/out/"$LIBRARIES_CACHE".sha512
      - save_cache:
          key: macos-libraries2-{{ checksum "scripts/macosx-build-dependencies.sh" }}-{{ checksum ".circleci/config.yml" }}
          paths:
            - /Users/distiller/libraries/install
      - run:
          name: Build OpenSCAD
          command: |
            export OPENSCAD_LIBRARIES=/Users/distiller/libraries/install
            export PKG_CONFIG_PATH="$OPENSCAD_LIBRARIES/lib/pkgconfig"
            export DYLD_LIBRARY_PATH="$OPENSCAD_LIBRARIES/lib"
            export DYLD_FRAMEWORK_PATH="$OPENSCAD_LIBRARIES/lib"
            export NUMCPU=4
            time ./scripts/release-common.sh -snapshot
            cd build
            OPENSCAD_NAME=$(ls OpenSCAD-*.dmg)
            shasum -a 256 "$OPENSCAD_NAME" > "$OPENSCAD_NAME".sha256
            shasum -a 512 "$OPENSCAD_NAME" > "$OPENSCAD_NAME".sha512
            cp -v "$OPENSCAD_NAME"* /tmp/out/
      - run:
          name: Verify OpenSCAD binary
          command: |
            ./scripts/macosx-sanity-check.py build/OpenSCAD.app/Contents/MacOS/OpenSCAD
      - store_artifacts:
          path: /tmp/out
workflows:
  version: 2
  master-build:
    jobs:
      - openscad-mxe-32bit:
          context: secret-context
          filters:
              branches:
                  only:
                      - master
      - openscad-mxe-64bit:
          context: secret-context
          filters:
              branches:
                  only:
                      - master
      - openscad-appimage-64bit:
          context: secret-context
          filters:
              branches:
                  only:
                      - master
  branch-build:
    jobs:
      - openscad-mxe-32bit:
          filters:
              branches:
                  ignore:
                      - master
                      - coverity_scan
                      - /^(?i:continuous)$/
      - openscad-mxe-64bit:
          filters:
              branches:
                  ignore:
                      - master
                      - coverity_scan
                      - /^(?i:continuous)$/
      - openscad-appimage-64bit:
          filters:
              branches:
                  ignore:
                      - master
                      - coverity_scan
                      - /^(?i:continuous)$/
      - openscad-macos:
          filters:
              branches:
                  only:
                      - /.*-macos/
  scheduled:
    triggers:
      - schedule:
          cron: "30 6 * * 0,1,3,5,6"
          filters:
              branches:
                  only:
                      - master
    jobs:
      - openscad-macos
